# -*- coding: utf-8 -*-
"""
Created on Fri May 17 18:40:51 2024

@author: dlgur
"""

import pandas as pd

# 한글 폰트 설정
# 요인별 위험지수(동 기준) 
from matplotlib import font_manager, rc
font_path = 'C:/Windows/Fonts/malgun.ttf'
font_name = font_manager.FontProperties(fname = font_path).get_name()
rc('font', family = font_name)

#%% 수원사고 데이터 
df = pd.read_excel('./The elderly driver traffic accidents(suwon).xlsx')

# ## 전처리
# [사고일시] -> datetime
df['사고일시'] = pd.to_datetime(df['사고일시'], format='%Y년 %m월 %d일 %H시')  ## 2023-01-01 00:00:00
#   시간(int)
df['시간'] = df['사고일시'].dt.hour                                            ## 0

# [시군구] -> 구/ 동
gu = []
dong = []
for i in range(len(df)) :
    gu.append(df['시군구'].str.split(' ')[i][2])
    dong.append(df['시군구'].str.split(' ')[i][3])
df['구'] = gu 
df['동'] = dong

# 시간대 -> 주간/야간
"""
수도권:
주간: 오전 7시부터 오후 8시까지 (13시간)
야간: 오후 8시부터 다음 날 오전 7시까지 (11시간)
"""
df['주야간'] = df['시간'].apply(lambda x: '주간' if 7 <= x <= 20 else '야간')

# 사고건수
df['사고건수'] = 1

# ## 열 추출
accidents = df.loc[:, ['주야간', '구', '노면상태', '기상상태', '사고건수',
                     '사망자수', '중상자수', '경상자수', '부상신고자수']]

#%% ECLO 계산 함수
def cal_eclo(df) :
    df['ECLO'] = df['사망자수']*10 + df['중상자수']*5 + df['경상자수']*3 + df['부상신고자수']*1
    df['ECLO/사고건수'] = df['ECLO']/df['사고건수']
    return df

#%%
###############################################################################
# 요인별 ECLO 계산
###############################################################################
time_group = accidents.groupby('주야간')[['사고건수', '사망자수', '중상자수', '경상자수', '부상신고자수']].sum()
cal_eclo(time_group)
"""
     사고건수  사망자수  중상자수  경상자수  부상신고자수  ECLO  ECLO/사고건수
주야간                                                 
야간    307     4    74   316      20  1378   4.488599
주간   1573    12   333  1693     178  7042   4.476796
"""

gu_group = accidents.groupby('구')[['사고건수', '사망자수', '중상자수', '경상자수', '부상신고자수']].sum()
cal_eclo(gu_group)
"""
     사고건수  사망자수  중상자수  경상자수  부상신고자수  ECLO  ECLO/사고건수
구                                                   
권선구   559     8   120   604      73  2565   4.588551
영통구   284     2    56   318      22  1276   4.492958
장안구   487     4   114   505      54  2179   4.474333
팔달구   550     2   117   582      49  2400   4.363636
"""

road_group = accidents.groupby('노면상태')[['사고건수', '사망자수', '중상자수', '경상자수', '부상신고자수']].sum()
cal_eclo(road_group)
"""
       사고건수  사망자수  중상자수  경상자수  부상신고자수  ECLO  ECLO/사고건수
노면상태                                                  
건조     1711    14   362  1825     180  7605   4.444769
기타        6     0     1     7       2    28   4.666667
서리/결빙     8     0     3     7       3    39   4.875000
적설        4     0     1     4       0    17   4.250000
젖음/습기   151     2    40   166      13   731   4.841060
"""

weather_group = accidents.groupby('기상상태')[['사고건수', '사망자수', '중상자수', '경상자수', '부상신고자수']].sum()
cal_eclo(weather_group)
"""
      사고건수  사망자수  중상자수  경상자수  부상신고자수  ECLO  ECLO/사고건수
기상상태                                                 
기타       6     0     1     8       0    29   4.833333
눈        7     0     1     6       2    25   3.571429
맑음    1684    13   364  1794     180  7512   4.460808
비      119     2    28   133      12   571   4.798319
흐림      64     1    13    68       4   283   4.421875
"""

#%%
###############################################################################
# 요인별 순위기준 위험지수(가중치부여) 데이터
###############################################################################
risk_score = pd.read_csv('요인별 위험지수(가중치부여).csv', index_col='Unnamed: 0')

element_risk = risk_score.copy()

# 주야간
time_list = ['주간', '야간']
for x in time_list :
    element_risk.loc[element_risk['주야간'] == x, '주야간_eclo'] = time_group.loc[x, 'ECLO/사고건수']
    
# 구
gu_list = ['권선구', '장안구', '팔달구', '영통구']
for x in gu_list :
    element_risk.loc[element_risk['구'] == x, '구_eclo'] = gu_group.loc[x, 'ECLO/사고건수']
    
# 노면상태
road_list = ['건조', '서리/결빙', '젖음/습기', '기타', '적설']
for x in road_list :
    element_risk.loc[element_risk['노면상태'] == x, '노면상태_eclo'] = road_group.loc[x, 'ECLO/사고건수']
    
# 기상상태
weather_list = ['맑음', '눈', '흐림', '기타', '비']
for x in weather_list :
    element_risk.loc[element_risk['기상상태'] == x, '기상상태_eclo'] = weather_group.loc[x, 'ECLO/사고건수']

print(element_risk)
"""
    주야간    구   노면상태 기상상태  ...  주야간_eclo    구_eclo  노면상태_eclo  기상상태_eclo
0    주간  권선구     건조   맑음  ...  4.476796  4.588551   4.444769   4.460808
1    주간  권선구     건조    비  ...  4.476796  4.588551   4.444769   4.798319
2    주간  팔달구     건조   맑음  ...  4.476796  4.363636   4.444769   4.460808
3    주간  권선구  젖음/습기   맑음  ...  4.476796  4.588551   4.841060   4.460808
4    야간  권선구     건조   맑음  ...  4.488599  4.588551   4.444769   4.460808
..   ..  ...    ...  ...  ...       ...       ...        ...        ...
195  주간  영통구     적설   기타  ...  4.476796  4.492958   4.250000   4.833333
196  야간  영통구     기타   기타  ...  4.488599  4.492958   4.666667   4.833333
197  야간  장안구     적설   기타  ...  4.488599  4.474333   4.250000   4.833333
198  야간  영통구     적설    눈  ...  4.488599  4.492958   4.250000   3.571429
199  야간  영통구     적설   기타  ...  4.488599  4.492958   4.250000   4.833333

[200 rows x 14 columns]
"""

# 요인별 (순위지수 + ECLO) = eclo_risk_sum
element_risk['eclo_risk_sum'] = element_risk.iloc[:, [4,5,6,7,10,11,12,13]].sum(axis=1) 

# 요인별 (순위지수 * ECLO) = eclo_risk_mul
element_risk['eclo_risk_mul'] = 0
for i, j in [(4,10),(5,11),(6,12),(7,13)] :
    val = element_risk.iloc[:, i]*element_risk.iloc[:, j]
    element_risk['eclo_risk_mul'] = element_risk['eclo_risk_mul'] + val
    

element_risk.to_csv('요인별 위험지수(ECLO 추가).csv')
    
#%%
###############################################################################
# 위험지수 총계와 해당 조건에 따른 실제 사고건수 비교
###############################################################################
accident_count = df.groupby(['주야간', '구', '노면상태', '기상상태'])['사고건수'].sum().reset_index()
accident_count = accident_count.sort_values(by='사고건수', ascending=False).reset_index(drop=True)    

accident_risk = accident_count.merge(element_risk, on = ['주야간', '구', '노면상태', '기상상태'])
accident_risk = accident_risk[['주야간', '구', '노면상태', '기상상태','사고건수', 'total_risk', 'corr_risk', 'eclo_risk_sum', 'eclo_risk_mul']]    
print(accident_risk)
"""
   주야간    구   노면상태 기상상태  ...  total_risk  corr_risk  eclo_risk_sum  eclo_risk_mul
0   주간  팔달구     건조   맑음  ...        15.0  22.886822      32.746009      66.572385
1   주간  권선구     건조   맑음  ...        16.0  24.363554      33.970924      71.835680
2   주간  장안구     건조   맑음  ...        14.0  21.410091      31.856705      62.430141
3   주간  영통구     건조   맑음  ...        13.0  19.933360      30.875330      57.974433
4   야간  권선구     건조   맑음  ...        15.0  23.150353      32.982727      67.370687
5   야간  팔달구     건조   맑음  ...        14.0  21.673621      31.757812      62.107392
6   야간  장안구     건조   맑음  ...        13.0  20.196890      30.868509      57.965148
7   야간  영통구     건조   맑음  ...        12.0  18.720159      29.887134      53.509441
8   주간  권선구  젖음/습기    비  ...        14.0  21.157508      32.704726      65.865312
9   주간  장안구  젖음/습기    비  ...        12.0  18.204046      30.590508      56.459773
10  주간  팔달구  젖음/습기    비  ...        13.0  19.680777      31.479811      60.602017
11  야간  팔달구  젖음/습기    비  ...        12.0  18.467576      30.491615      56.137024
12  야간  권선구  젖음/습기    비  ...        13.0  19.944307      31.716529      61.400319
13  주간  장안구     건조   흐림  ...        12.0  18.204046      29.817773      53.391728
14  주간  영통구  젖음/습기    비  ...        11.0  16.727314      29.609133      52.004065
15  주간  팔달구     건조   흐림  ...        13.0  19.680777      30.707076      57.533972
16  주간  팔달구  젖음/습기   흐림  ...        12.0  18.077754      30.103367      54.674364
17  야간  장안구     건조   흐림  ...        11.0  16.990845      28.829576      48.926735
18  야간  장안구  젖음/습기    비  ...        11.0  16.990845      29.602311      51.994780
19  주간  권선구     건조   흐림  ...        14.0  21.157508      31.931991      62.797267
20  주간  영통구     건조   흐림  ...        11.0  16.727314      28.836398      48.936020
21  야간  권선구  젖음/습기   흐림  ...        12.0  18.341285      30.340085      55.472667
22  야간  영통구  젖음/습기    비  ...        10.0  15.514114      28.620936      47.539073
23  야간  영통구  젖음/습기   흐림  ...         9.0  13.911091      27.244492      41.611421
24  야간  권선구     건조   흐림  ...        13.0  19.944307      30.943794      58.332274
25  주간  권선구     기타   맑음  ...        13.0  19.554485      31.192821      58.945167
26  주간  장안구  젖음/습기   맑음  ...        13.0  19.807068      31.252996      59.570534
27  주간  영통구  젖음/습기   흐림  ...        10.0  15.124292      28.232688      46.076413
28  주간  팔달구  젖음/습기    눈  ...        11.0  16.474731      28.252920      48.551597
29  주간  팔달구  서리/결빙    눈  ...        10.0  14.871709      27.286861      43.812358
30  주간  장안구  젖음/습기   흐림  ...        11.0  16.601023      29.214063      50.532121
31  주간  장안구     적설    눈  ...         7.0  10.188932      23.772557      29.295114
32  야간  팔달구     건조   흐림  ...        12.0  18.467576      29.718880      53.068979
33  야간  권선구     건조   기타  ...        11.0  16.738262      29.355253      49.899982
34  주간  영통구  젖음/습기   맑음  ...        12.0  18.330337      30.271621      55.114826
35  주간  영통구     기타   맑음  ...        10.0  15.124292      28.097228      45.083921
36  야간  장안구  젖음/습기   흐림  ...        10.0  15.387822      28.225867      46.067128
37  주간  권선구  서리/결빙   맑음  ...        14.0  21.157508      32.401155      64.236834
38  야간  팔달구  젖음/습기   흐림  ...        11.0  16.864553      29.115170      50.209372
39  주간  권선구     건조   기타  ...        12.0  17.951463      30.343449      54.364975
40  주간  팔달구  젖음/습기   기타  ...        10.0  14.871709      28.514825      46.242073
41  주간  팔달구     적설   흐림  ...         9.0  13.268686      26.512307      39.560126
42  야간  팔달구     건조   기타  ...        10.0  15.261531      28.130338      44.636687
43  야간  권선구  서리/결빙   맑음  ...        13.0  19.944307      31.412958      59.771841
44  야간  영통구     건조   기타  ...         8.0  12.308068      26.259660      36.038736
45  주간  권선구  젖음/습기   맑음  ...        15.0  22.760531      33.367214      68.976072
46  주간  영통구  서리/결빙   맑음  ...        11.0  16.727314      29.305561      50.375588
47  주간  장안구     적설   맑음  ...        10.0  14.998000      27.661936      44.456295
48  주간  권선구  젖음/습기   흐림  ...        13.0  19.554485      31.328282      59.937659
49  주간  장안구  서리/결빙   맑음  ...        12.0  18.204046      30.286936      54.831295
50  주간  장안구  서리/결빙    눈  ...         9.0  13.394977      26.397557      39.670114
51  주간  장안구     기타   맑음  ...        11.0  16.601023      29.078603      49.539628
52  야간  팔달구  서리/결빙   맑음  ...        12.0  18.467576      30.188043      54.508546

[53 rows x 9 columns]
"""

#%%
###############################################################################
# 시각화
###############################################################################
import matplotlib.pyplot as plt
import seaborn as sns

# 요인_risk - 사고건수 산점도
fig = plt.figure(figsize=(20,5))
ax1 = fig.add_subplot(1,4,1)
ax2 = fig.add_subplot(1,4,2)
ax3 = fig.add_subplot(1,4,3)
ax4 = fig.add_subplot(1,4,4)
sns.scatterplot(accident_risk, x='total_risk', y='사고건수', ax=ax1)
sns.scatterplot(accident_risk, x='corr_risk', y='사고건수', ax=ax2)
sns.scatterplot(accident_risk, x='eclo_risk_sum', y='사고건수', ax=ax3)
sns.scatterplot(accident_risk, x='eclo_risk_mul', y='사고건수', ax=ax4)
plt.show()


#%%
# 이상치 제외
accident_risk.describe()
"""
             사고건수  total_risk  corr_risk  eclo_risk_sum  eclo_risk_mul
count   53.000000   53.000000  53.000000      53.000000      53.000000
mean    35.471698   11.792453  17.944577      29.881000      53.524870
std     96.480090    1.864223   2.905526       1.995952       8.643054
min      1.000000    7.000000  10.188932      23.772557      29.295114
25%      1.000000   11.000000  16.474731      28.620936      48.551597
50%      3.000000   12.000000  18.204046      30.103367      54.364975
75%      9.000000   13.000000  19.933360      31.252996      59.570534
max    427.000000   16.000000  24.363554      33.970924      71.835680
"""
# 사고건수 100 이하 데이터 추출
accident_risk_fil1 = accident_risk.loc[accident_risk['사고건수'] <= 100]

# 요인_risk - 사고건수 산점도
fig = plt.figure(figsize=(10,5))
ax1 = fig.add_subplot(1,2,1)
ax2 = fig.add_subplot(1,2,2)
sns.scatterplot(accident_risk_fil1, x='eclo_risk_sum', y='사고건수', ax=ax1)
sns.scatterplot(accident_risk_fil1, x='eclo_risk_mul', y='사고건수', ax=ax2)
plt.show()  

# 사고건수 9 이하(3분위) 데이터 추출
accident_risk_fil2 = accident_risk.loc[accident_risk['사고건수'] <= 9]

# 요인_risk - 사고건수 산점도
fig = plt.figure(figsize=(10,5))
ax1 = fig.add_subplot(1,2,1)
ax2 = fig.add_subplot(1,2,2)
sns.scatterplot(accident_risk_fil2, x='eclo_risk_sum', y='사고건수', ax=ax1)
sns.scatterplot(accident_risk_fil2, x='eclo_risk_mul', y='사고건수', ax=ax2)
plt.show()